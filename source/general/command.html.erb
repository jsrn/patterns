---
title: The Command Pattern
---

<h1>The Command Pattern</h1>

<h2>What?</h2>

<p>The Command Pattern allows us to group operations in an object which can be passed around and invoked on demand.</p>

<h2>Why?</h2>

<p>Useful for cases where we wish to pass an action around our system, store it, defer it, or queue it.</p>

<h2>How?</h2>

<p>We start with a <strong>Receiver</strong>. This is one of our business objects. We'll use a <code class="inline-code">User</code> in this example, and it is the object on which our command is going to operate.</p>

<% code("ruby") do %>
class User
  def send_welcome_email
    # ...
  end

  def apply_introductory_discount
    # ...
  end
end
<% end %>

<p>The <code class="inline-code">Command</code> class is the lowest level building block of the pattern.</p>

<% code("ruby") do %>
class Command
  # This is to convey our intent that subclasses should implement this method.
  def execute
    raise NotImplementedError
  end
end
<% end %>

<p>And now we can implement <code class="inline-code">GreetUserCommand</code>, which we can pass on or store.</p>

<% code("ruby") do %>
class GreetUserCommand < Command
  def initialize(user)
    @user = user
  end

  def execute
    @user.send_welcome_email
    @user.apply_introductory_discount
  end
end
<% end %>

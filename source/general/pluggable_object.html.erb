---
title: Pluggable Object
description: Tidying conditional logic by storing a reference to an object with a known interface.
---

<h1>Pluggable Object</h1>

<h2>What?</h2>

<p>Store a reference to an object which implements a known interface and make references to it throughout the rest of the object.</p>

<h2>Why?</h2>

<p>We would like to reduce the amount of conditional logic in the following code, which controls movement for a person who is either driving or walking. It's messy as it is, and if we add a third mode of transport, we're really going to be suffering.</p>

<% code("ruby") do %>
class Driver
  def start
    @driving = driving?
  
    if @driving
      press_accelerator
    else
      pedal
    end
  end

  def steer
    if @driving
      turn_wheel
    else
      turn_handlebars
    end
  end

  def stop
    if @driving
      release_accelerator
    else
      stop_pedaling
    end
  end
end
<% end %>

<h2>How?</h2>

<% code("ruby") do %>
class Driver
  def start
    @mode = if driving?
              DrivingMode.new
            else
              CyclingMode.new
            end

    @mode.start
  end

  def steer
    @mode.steer
  end

  def stop
    @mode.stop
  end
end
<% end %>
